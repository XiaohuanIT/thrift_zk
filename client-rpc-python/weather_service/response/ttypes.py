#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import weather_service.entity.ttypes

from thrift.transport import TTransport


class GetCityWeatherResponse(object):
    """
    Attributes:
     - success
     - error_message
     - weather
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'success', None, None, ),  # 1
        (2, TType.STRING, 'error_message', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'weather', (TType.STRUCT, (weather_service.entity.ttypes.Weather, weather_service.entity.ttypes.Weather.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, success=None, error_message=None, weather=None,):
        self.success = success
        self.error_message = error_message
        self.weather = weather

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.weather = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = weather_service.entity.ttypes.Weather()
                        _elem5.read(iprot)
                        self.weather.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetCityWeatherResponse')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.error_message is not None:
            oprot.writeFieldBegin('error_message', TType.STRING, 2)
            oprot.writeString(self.error_message.encode('utf-8') if sys.version_info[0] == 2 else self.error_message)
            oprot.writeFieldEnd()
        if self.weather is not None:
            oprot.writeFieldBegin('weather', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.weather))
            for iter6 in self.weather:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
